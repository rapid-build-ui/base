import{isTemplatePartActive}from"./template.js";const walkerNodeFilter=133;export function removeNodesFromTemplate(e,t){const{element:{content:n},parts:r}=e,o=document.createTreeWalker(n,walkerNodeFilter,null,!1);let l=nextActiveIndexInTemplateParts(r),a=r[l],d=-1,i=0;const c=[];let s=null;for(;o.nextNode();){d++;const e=o.currentNode;for(e.previousSibling===s&&(s=null),t.has(e)&&(c.push(e),null===s&&(s=e)),null!==s&&i++;void 0!==a&&a.index===d;)a.index=null!==s?-1:a.index-i,a=r[l=nextActiveIndexInTemplateParts(r,l)]}c.forEach(e=>e.parentNode.removeChild(e))};const countNodes=e=>{let t=11===e.nodeType?0:1;const n=document.createTreeWalker(e,walkerNodeFilter,null,!1);for(;n.nextNode();)t++;return t},nextActiveIndexInTemplateParts=(e,t=-1)=>{for(let n=t+1;n<e.length;n++){const t=e[n];if(isTemplatePartActive(t))return n}return-1};export function insertNodeIntoTemplate(e,t,n=null){const{element:{content:r},parts:o}=e;if(null===n||void 0===n)return void r.appendChild(t);const l=document.createTreeWalker(r,walkerNodeFilter,null,!1);let a=nextActiveIndexInTemplateParts(o),d=0,i=-1;for(;l.nextNode();){for(i++,l.currentNode===n&&(d=countNodes(t),n.parentNode.insertBefore(t,n));-1!==a&&o[a].index===i;){if(d>0){for(;-1!==a;)o[a].index+=d,a=nextActiveIndexInTemplateParts(o,a);return}a=nextActiveIndexInTemplateParts(o,a)}}};